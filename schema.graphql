# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

"a generic mutation result, add ok"
interface IResult {
  "did the request succeed"
  ok: Boolean
}

"a generic service"
interface IService {
  "how hard is it"
  difficulty: Difficulty
  "how long it should take"
  estimatedTimeToComplete: EstimatedTimeToCompleteType
  id: ID!
  "materials etc..."
  notes: String
  "the name of the service"
  serviceName: String!
  "when should we be reminded to do it again"
  suggestedServiceInterval: ServiceIntervalType
}

interface LongInterval {
  miles: Int
  months: Month
  years: Year
}

interface ShortInterval {
  days: Day
  hours: Hour
  minutes: Minute
}

type DeleteVehicleResult {
  errors: [String]
  ok: Boolean
}

type EstimatedTimeToCompleteType implements ShortInterval {
  days: Day
  hours: Hour
  minutes: Minute
}

type Garage {
  vehicles: [Vehicle]!
}

"a record of a service being performed on vehicle"
type Job {
  _id: ID!
  "how much did it cost"
  cost: String
  "date services performed"
  dateCompleted: Date
  "who performed the service: ie: diy"
  performedBy: String!
  "list of services performed"
  services: [Service!]!
  "how long did it take"
  timeTaken: EstimatedTimeToCompleteType
}

type JobResult implements IResult {
  job: Job!
  ok: Boolean
}

"a vehicle manufacturer"
type Make {
  "the models manufacurered"
  models: [Model]!
  "the manufacturers name"
  name: String!
}

"a vehicle model"
type Model {
  "the model name"
  name: String!
  "the model year"
  year: Year!
}

type Mutation {
  "add a job to the db"
  createJob(input: JobInput!): JobResult!
  "add an entry to a vehicles odometer history"
  createOdometerReading(input: OdometerReadingInput!): OdometerResult!
  "add a service to the db"
  createService(input: ServiceInput!): ServiceResult!
  "add a vehicle to the db"
  createVehicle(input: CreateVehicleInput!): VehicleResult!
  "remove a vehicle from the db"
  deleteVehicle(vehicleId: ID!): DeleteVehicleResult!
}

type OdometerResult {
  errors: [String]
  ok: Boolean
  reading: OdometerType!
}

"a recording of a given vehicles odometer at a given date/time"
type OdometerType {
  dateCompleted: DateTime!
  miles: String!
}

type Query {
  "get a specific job from the db"
  getJob(id: ID!): Job!
  "get a list of job done for a given vehicle"
  getJobs(vehicle: ID!): [Job]!
  "get a specific make"
  getMake(name: String!): Make
  "get a list of car manufacturers"
  getMakes: [Make]
  "get the models for a manufacture during a given year"
  getModels(input: GetModelsInput!): [Model]
  "get the odometer history for a vehicle"
  getOdometerHistory(vehicle: ID!): VehicleOdometerHistory!
  "get a specific service from the db"
  getService(name: String): Service
  "get a list of serivces stored in db"
  getServices: [Service]!
  "get a specific vehicle from the db"
  getVehicle(_id: ID!): Vehicle!
  "get a list of vehicles stored in db"
  getVehicles: [Vehicle]
}

"a specific service that may be done"
type Service implements IService {
  difficulty: Difficulty
  estimatedTimeToComplete: EstimatedTimeToCompleteType
  id: ID!
  notes: String
  serviceName: String!
  suggestedServiceInterval: ServiceIntervalType
}

type ServiceIntervalType implements LongInterval {
  miles: Int
  months: Month
  years: Year
}

type ServiceOut {
  difficulty: Difficulty
  estimatedTimeToComplete: EstimatedTimeToCompleteType
  name: String
  notes: String
  suggestedServiceInterval: ServiceIntervalType
}

type ServiceResult implements IResult {
  error: String
  ok: Boolean
  service: ServiceOut
}

"a specific vehicle (combanation of make, model and year)"
type Vehicle {
  _id: ID!
  "latest odometer reading"
  currentOdometerReading: Int
  "the vehicles make"
  make: Make!
  "the vehicles model"
  model: Model!
  "the models trim level"
  trim: String
}

"a history of od readings for a vehicle"
type VehicleOdometerHistory {
  readings: [OdometerType!]!
  vehicle: Vehicle!
}

type VehicleResult implements IResult {
  ok: Boolean
  vehicle: Vehicle!
}

enum Difficulty {
  "super easy (should do myself)"
  EASY
  "pretty tough, should think about letting a mechanic handle it"
  HARD
  "tools or experience needed hard to get, let a pro do these"
  IMPOSSIBLE
  "a litter harder, should still diy, but research more thouroughly first"
  INTERMEDIATE
}

input CreateVehicleInput {
  make: MakeInput!
  miles: Int
  model: ModelInput!
}

input EstimatedTimeToCompleteInput {
  days: Day
  hours: Hour
  minutes: Minute
}

input FindServiceInput {
  name: String
}

input GetModelsInput {
  make: MakeInput!
  year: Year!
}

input JobInput {
  cost: String
  performedBy: String!
  services: [String!]
  timeTaken: TimeTakenInput!
  vehicle: VehicleInput!
}

input MakeInput {
  name: String!
}

input ModelInput {
  name: String!
  year: Int!
}

input OdometerInput {
  miles: String!
}

input OdometerReadingInput {
  miles: String!
  vehicle: VehicleInput!
}

input ServiceInput {
  difficulty: Difficulty
  estimatedTimeToComplete: EstimatedTimeToCompleteInput
  name: String!
  notes: String
  suggestedServiceInterval: ServiceIntervalInput
}

input ServiceIntervalInput {
  miles: Int
  months: Month
  years: Year
}

input TimeTakenInput {
  days: Day
  hours: Hour
  minutes: Minute
}

input VehicleInput {
  _id: ID!
}


"a date in the form of YYYY-MM-DD"
scalar Date

"a number of days ie: 6 = six days"
scalar Day

"a number of hours ie: 3 = three hours"
scalar Hour

"a number of minutes ie: 9 = nine minutes"
scalar Minute

"a number of months ie: 4 = four months"
scalar Month

"a 4 digit year"
scalar Year

scalar DateTime

"a number of seconds ie: 15 = fifteen seconds"
scalar Second